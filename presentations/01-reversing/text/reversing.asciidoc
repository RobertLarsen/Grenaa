Reversing - Compiler genereret kode
-----------------------------------

Calling conventions og kode strukturer

Reversing - Calling conventions
-------------------------------

En politik som (bl.a.) definerer følgende:
[role="incremental"]
* Hvordan parametre leveres til subroutine kald
* Hvem der skal rydde parametre af stakken (hvis den bruges til parametre)
* Hvordan retur værdier leveres til kalderen
* Hvilke registre, som skal bibeholde deres værdi gennem subroutine kald

Reversing - Calling conventions - cdecl
---------------------------------------

https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl

[role="incremental"]
* Parametre til subroutiner leveres (generelt) på stakken, første argument øverst
* Den kaldende funktion rydder selv stakken op
* Returværdien leveres (generelt) i 'eax' registeret
* Alle registre undtagen 'eax', 'ecx' og 'edx' skal bibeholde deres værdi under subroutine kald

Reversing - Argumenter og returværdi
------------------------------------

[source,c]
------------------------------------------------
include::../examples/arguments_and_ret.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/arguments_and_ret.s[]
------------------------------------------------

Reversing - Argumenter til funktionskald
----------------------------------------

To metoder:

[role="incremental"]
[source,asm]
------------------------------------------------
push 3
push 2
push 1
call subroutine
add esp, 12
------------------------------------------------

[role="incremental"]
[source,asm]
------------------------------------------------
mov DWORD PTR [esp], 1
mov DWORD PTR [esp+4], 2
mov DWORD PTR [esp+8], 3
call subroutine
------------------------------------------------

Reversing - Function prologue/epilogue
--------------------------------------

[source,c]
------------------------------------------------
include::../examples/prologue_epilogue.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/prologue_epilogue.s[]
------------------------------------------------

Reversing - Function prologue/epilogue - Inden 'push ebp'
--------------------------------------------------------

image::../images/prologue_epilogue_01.png[height=600,float="right"]

[source,asm]
------------------------------------------------
include::../examples/prologue_epilogue.s_0[]
------------------------------------------------

Reversing - Function prologue/epilogue - Efter 'push ebp'
--------------------------------------------------------

image::../images/prologue_epilogue_02.png[height=600,float="right"]

[source,asm]
------------------------------------------------
include::../examples/prologue_epilogue.s_1[]
------------------------------------------------

Reversing - Function prologue/epilogue - Efter 'mov ebp, esp'
-------------------------------------------------------------

image::../images/prologue_epilogue_03.png[height=600,float="right"]

[source,asm]
------------------------------------------------
include::../examples/prologue_epilogue.s_2[]
------------------------------------------------

Reversing - Function prologue/epilogue - Efter 'sub esp, 0x30'
--------------------------------------------------------------

image::../images/prologue_epilogue_04.png[height=600,float="right"]

[source,asm]
------------------------------------------------
include::../examples/prologue_epilogue.s_3[]
------------------------------------------------

Reversing - Function prologue/epilogue - Inden 'leave'
------------------------------------------------------

image::../images/prologue_epilogue_04.png[height=600,float="right"]

[source,asm]
------------------------------------------------
include::../examples/prologue_epilogue.s_4[]
------------------------------------------------

Reversing - Function prologue/epilogue - Efter 'leave'
------------------------------------------------------

image::../images/prologue_epilogue_05.png[height=600,float="right"]

[source,asm]
------------------------------------------------
include::../examples/prologue_epilogue.s_5[]
------------------------------------------------

Reversing - Betingelser - if
----------------------------

[source,c]
------------------------------------------------
include::../examples/condition_1.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/condition_1.s[]
------------------------------------------------

...som svarer til:

[source,c]
------------------------------------------------
int condition_1(int number) {
    register int ret;
    if (number <= 0) goto a;
    ret = 1;
    goto end;
a: if (number > -1) goto b;
    ret = -1;
    goto end;
b: ret = 0;
end:
    return ret;
}
------------------------------------------------

Reversing - Betingelser - if
----------------------------

[source,c]
------------------------------------------------
include::../examples/condition_2.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/condition_2.s[]
------------------------------------------------

...som svarer til:

[source,c]
------------------------------------------------
int condition_2(int number) {
    register int ret;
    if (number <= 0) goto a;
    if (number > 10) goto a;
    ret = 1;
    goto end;
a: ret = 0;
end:
    return ret;    
}
------------------------------------------------

Reversing - Betingelser - if
----------------------------

[source,c]
------------------------------------------------
include::../examples/condition_3.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/condition_3.s[]
------------------------------------------------

...som svarer til:

[source,c]
------------------------------------------------
int condition_3(int number) {
    register int ret;
    if (number > 100) goto a;
    if (number >= -100) goto b;
a:  ret = 1;
    goto end;
b:  ret = 0;
end:
    return ret;
}
------------------------------------------------

Reversing - Loops - for
-----------------------

[source,c]
------------------------------------------------
include::../examples/for_loop.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/for_loop.s[]
------------------------------------------------

Reversing - Main metodens stak
------------------------------
image::../images/main_stack_frame.png[]

Reversing - Anden opgave
-------------------------

Skriv en serienummergenerator til ProsaCrackme.bin

Denne laver vi sammen

Reversing - Pointers
--------------------

[source,c]
------------------------------------------------
include::../examples/linked_list_tail.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/linked_list_tail.s[]
------------------------------------------------

Reversing - Arrays
------------------

[source,c]
------------------------------------------------
include::../examples/arrays.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/arrays.s[]
------------------------------------------------

Reversing - Structures
----------------------

[source,c]
------------------------------------------------
include::../examples/structures.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/structures.s[]
------------------------------------------------

Reversing - Tredje opgave
-------------------------

ProsaBomb.bin

Denne starter vi på sammen, derefter tager I resten på egen hånd eller i grupper.

Reversing - Intrinsics
----------------------

[source,c]
------------------------------------------------
include::../examples/intrinsics.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/intrinsics.s[]
------------------------------------------------

Reversing - Optimeringer
------------------------

[source,c]
------------------------------------------------
include::../examples/optimizations_1.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/optimizations_1.s[]
------------------------------------------------

Reversing - Optimeringer
------------------------

[source,c]
------------------------------------------------
include::../examples/optimizations_2.c[]
------------------------------------------------

[source,asm]
------------------------------------------------
include::../examples/optimizations_2.s[]
------------------------------------------------

Reversing - Anti debugging - Debug dig selv
-------------------------------------------

[source,c]
------------------------------------------------
if (ptrace(PTRACE_TRACEME, 0, 0, 0) == -1) {
    printf("Debugging not allowed!\n");
    exit(-1);
}
------------------------------------------------

Reversing - Anti debugging - Crash værktøjerne
----------------------------------------------

[source,bash]
------------------------------------------------
$ gdb -q ./breakme                                                       
Reading symbols from ./breakme...Segmentation fault (core dumped)
$
------------------------------------------------

Reversing - Fjerde opgave
-------------------------

Første level i SmashTheStack IO er en ren reverser opgave:

http://io.smashthestack.org:84/

Reversing - Femte opgave
-------------------------
http://www.crackmes.de/users/tryger/keygen_rivendel/

Hvis nogen bliver færdig med bomben.

Kan findes i assignments/rivendel.zip

Reversing - Squally
-------------------

https://squallygame.com/

https://store.steampowered.com/app/770200/Squally/

https://www.youtube.com/watch?v=WcocY92-26Q

"Squally is a 2D puzzle RPG game that teaches video game hacking -- WITHOUT boring lessons, lectures, nor the need for prior experience. Instead, Squally teaches hacking through fun engaging puzzles where learning is a by-product."
