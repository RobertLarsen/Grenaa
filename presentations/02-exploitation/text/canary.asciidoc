Canary
------

image::../images/CanaryInACoalMine_2.jpg[]

Canary
------

Fra Wikipedia:

"Stack canaries, named for their analogy to a canary in a coal mine, are used to detect a stack buffer overflow before execution of malicious code can occur. This method works by placing a small integer, the value of which is randomly chosen at program start, in memory just before the stack return pointer. Most buffer overflows overwrite memory from lower to higher memory addresses, so in order to overwrite the return pointer (and thus take control of the process) the canary value must also be overwritten. This value is checked to make sure it has not changed before a routine uses the return pointer on the stack.[2] This technique can greatly increase the difficulty of exploiting a stack buffer overflow because it forces the attacker to gain control of the instruction pointer by some non-traditional means such as corrupting other important variables on the stack."

Simple login - nu med canary
----------------------------

image::../images/simple_login_stack_canary.png[height=600,float="right"]

[source,asm]
------------------------------------------------
0804854d <main>:
 804854d: push   ebp
 804854e: mov    ebp,esp
 8048550: and    esp,0xfffffff0
 8048553: sub    esp,0x60
 8048556: mov    eax,DWORD PTR [ebp+0xc]
 8048559: mov    DWORD PTR [esp+0xc],eax
 804855d: mov    eax,gs:0x14
 8048563: mov    DWORD PTR [esp+0x5c],eax
 8048567: xor    eax,eax
 .....
 .....
 .....
 8048633: mov    edx,DWORD PTR [esp+0x5c]
 8048637: xor    edx,DWORD PTR gs:0x14
 804863e: je     8048645 <main+0xf8>
 8048640: call   8048410 <__stack_chk_fail@plt>
 8048645: leave  
 8048646: ret    
------------------------------------------------

TIP: Læg mærke til at de lokale variable er blevet omarrangeret så vi kan ikke længere overskrive 'authenticated'.

Simple login - nu med canary
----------------------------

[source,c]
------------------------------------------------
$ ./assignments/simple_login_canary 
Enter your name: poul
Enter your password: 012345678901234567890123456789012
Piss off!
*** stack smashing detected ***: ./assignments/simple_login_canary terminated
Aborted (core dumped)
------------------------------------------------

Simple login - nu med canary
----------------------------

image::../images/simple_login_canary_gdb.png[]

Overvind canaries
-----------------

* Leak hukommelse (ja, den bliver ved med at være nyttig)
* Brute force (kan i nogle tilfælde gøres intelligent)
* Overskriv kun lokale variable...ikke kanariefuglen
* Overskriv noget, som bruges, inden kanariefuglen tjekkes
* Ingen kanariefugle på heapen!

TIP: gcc placerer pr. default ikke canaries i alle funktioner (pga. performance og kode størrelse). Vores 'handle_client' fik ikke en kanariefugl før jeg compilede med '-fstack-protector-all'

fork() vs. xinetd
-----------------
'fork()' system kaldet kloner processen i forælder og barn.

Forælder processen tager imod klienter og forker. Barnet håndterer klienten, forælderen fortsætter med at tage imod nye klienter.

fork() vs. xinetd
-----------------
'xinetd' forker når en klient modtages. Barnet udfører et 'execve' systemkald og lader et eksternt program håndtere forbindelsen.

fork() vs. xinetd
-----------------
I 'xinetd' håndteres forbindelsen af en "frisk" proces med nyt adresse layout og nye canaries.

I en "simpel" forking server (som dem vi har arbejdet med) arves adresse layoutet og dermed også canaries.

TIP: 'xinetd' bruges ofte i CTF sammenhænge, men ikke så meget i den "virkelige verden".

Fjerde opgave
-------------

Magen til opgave tre men nu med canary. Lytter på 'localhost:10005'.

Find med:

[source,bash]
------------------------------------------------
$ ps aux | grep assignment | grep 10005 | awk '{print $2}'
3728
------------------------------------------------

Attach med gdb:

[source,bash]
------------------------------------------------
$ gdb $C 3728
------------------------------------------------

Syvende opgave
--------------

Magen til sjette opgave plus PIE. Find trampolinen i én eksekvering og brute force så alle adresser, som ASLR kunne finde på at ligge den (kun 1024 forskellige husker I nok).

Den ligger på 'localhost:10007'.

Ottende opgave
--------------

Prøv med "bof" opgaven fra pwnable.kr. Den burde være triviel nu:


Nana told me that buffer overflow is one of the most common software vulnerability. 
Is that true?

Download : http://pwnable.kr/bin/bof

Download : http://pwnable.kr/bin/bof.c

Running at : nc pwnable.kr 9000

Niende opgave
-------------

Løs dem her: http://overthewire.org/wargames/narnia/

Level 5 og 7 er format string opgaver, men resten er "simple" buffer overflows.

Jeg kan levere passwords, så I kan springe over 5 og 7...dem kan vi evt. kigge på, hvis der er interesse i en "exploitation 102".
